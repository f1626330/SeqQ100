<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:wpfFramework="clr-namespace:Sequlite.WPF.Framework;assembly=Sequlite.WPF.Framework"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Sequlite.WPF.Framework;component/Resources/StyleDictionary.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <LinearGradientBrush x:Key="commonBk" EndPoint="0.504,1.5" StartPoint="0.504,0.03">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#BDD8E6" Offset="0"/>
            <GradientStop Color="#FFFFFFFF" Offset="0.567"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="btnAction" TargetType="{x:Type wpfFramework:ImageButton}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Width" Value="192" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Background" Value="White" />
        <Setter Property="FontSize" Value="22" />
        <Setter Property="Foreground" Value="DarkOliveGreen" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpfFramework:ImageButton}">
                    <Border Background="{TemplateBinding Background}" x:Name="border" BorderThickness="1" CornerRadius="5">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Image Margin="2" Grid.Column ="0" x:Name="img"
                                   Source="{Binding ImageContent,RelativeSource={RelativeSource TemplatedParent}}" 
                                             HorizontalAlignment="Left" />
                            <TextBlock  Grid.Column ="1" Text="{TemplateBinding Content}" x:Name="textBlock"
                                                HorizontalAlignment="Left"  VerticalAlignment="Center"  Margin="5"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="textBlock" Value="0.4"/>
                            <Setter Property="Opacity" TargetName="img" Value="0.4"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Opacity"  Value="0.8" />
                            <Setter TargetName="border"  Property="BorderBrush"   Value="{StaticResource Button.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter TargetName="border" Property="OpacityMask" Value="{x:Null}" />
                            <Setter TargetName="border" Property="Effect">
                                <Setter.Value>
                                    <BlurEffect />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="Yellow" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Opacity" Value="0.75" />
        <Setter Property="FontSize" Value="20" />
        <Style.Triggers>
            <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Control}" x:Key="basePageControlStyle">
        <Setter Property="FontSize" Value="22" />
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource basePageControlStyle}"></Style>
    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource basePageControlStyle}" ></Style>
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource basePageControlStyle}"></Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="bigTextBlockStyle">
        <Setter Property="FontSize" Value="22"  />
    </Style>
    <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource basePageControlStyle}"></Style>
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource basePageControlStyle}"></Style>
    <Style TargetType="{x:Type RichTextBox}"   x:Key="richTextBoxStyle">
        <Setter Property="FontSize" Value="18" />

        <Setter Property="Padding" Value="3" />
        <Setter Property="IsReadOnly" Value="true" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="AcceptsTab" Value="True" />
    </Style>
    <Style x:Key='busyIndicator' TargetType='ContentControl'>
        <Setter Property='Template'>
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">

                    <Viewbox>
                        <Path  Opacity="0.8" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Control}}" Data="M28,2.202v4.059C37.053,7.706,44,15.547,44,25c0,10.477-8.523,19-19,19S6,35.477,6,25c0-9.442,6.93-17.275,15.966-18.734 V2.206C10.713,3.696,2,13.347,2,25c0,12.682,10.317,23,23,23s23-10.318,23-23C48,13.335,39.269,3.677,28,2.202z">
                            <Path.RenderTransform>
                                <RotateTransform x:Name="MyAnimatedTransform"  Angle="0" CenterX="25" CenterY="25" />
                            </Path.RenderTransform>

                            <Path.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=IsVisible}"  Value="True">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard  x:Name="sb">
                                                    <Storyboard>
                                                        <DoubleAnimation 
                                    Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
                                    From="0"
                                    To="360"
                                    Duration="0:0:1"
                                    RepeatBehavior="Forever" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <StopStoryboard BeginStoryboardName="sb"/>
                                            </DataTrigger.ExitActions>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Path.Style>
                        </Path>
                    </Viewbox>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ProgressBarBorderBrush" Color="Transparent" />
    <SolidColorBrush x:Key="ProgressBarBackgroundBrush" Color="White" />
    <SolidColorBrush x:Key="ProgressBarTrackBackgroundBrush" Color="Green" />
    <Style TargetType="{x:Type ProgressBar}" x:Key="progressbarStyle">
        <Setter Property="Foreground" Value="LightGreen"/>
        <Setter Property="Opacity" Value="0.35" />
        <Setter Property="Background" Value="#EEEEEE"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid Name="TemplateRoot" SnapsToDevicePixels="true">
                        <Rectangle Fill="{TemplateBinding Background}"/>
                        <Rectangle Name="PART_Track" Margin="0"/>
                        <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="0">
                            <Grid Name="Foreground">
                                <Rectangle Fill="{TemplateBinding Foreground}" Name="Indicator" />
                                <Grid x:Name="Animation" ClipToBounds="true" Visibility="Hidden">
                                    <Rectangle Fill="{TemplateBinding Background}" Name="HiderPre" Margin="0,0,50,0">
                                        <Rectangle.RenderTransform>
                                            <ScaleTransform x:Name="HiderPreTransform" ScaleX="0"/>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                    <Rectangle Fill="{TemplateBinding Background}" Name="HiderPost" RenderTransformOrigin="1, 0" Margin="50,0,0,0">
                                        <Rectangle.RenderTransform>
                                            <ScaleTransform x:Name="HiderPostTransform" ScaleX="1"  />
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Grid>
                                <Grid Name="Overlay">
                                </Grid>
                            </Grid>
                        </Decorator>

                        <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter TargetName="Animation" Property="Visibility" Value="Visible" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation
                                            Storyboard.TargetName="HiderPreTransform"
                                            Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                            To="1.3"
                                            Duration="0:00:4" />
                                        <DoubleAnimation
                                        Storyboard.TargetName="HiderPostTransform"
                                        Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                        To="0"
                                        Duration="0:00:4" />

                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="ButtonWithoutMouseOverEffectStyle" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        CornerRadius="5"
                        Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="Gainsboro" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.25" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="MediaPlayButtonStyle" BasedOn="{StaticResource ButtonWithoutMouseOverEffectStyle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Height" Value="100" />
        <Setter Property="Width" Value="100" />
        <!--<Setter Property="Canvas.ZIndex" Value="1" />-->
        <Setter Property="BorderThickness" Value="0" />

        <Style.Triggers>
            <DataTrigger Binding="{ Binding CurrentPageState.IsPlayingAnimation}"  Value="False">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentPageState.IsPlayingAnimation}"  Value="True">
                <Setter Property="Visibility" Value="Hidden" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type MediaElement}"   x:Key="AnimationMediaStyle">
        <Setter Property="UnloadedBehavior" Value="Manual"/>
        <Setter Property="OpacityMask" Value="#FFFFFFFF"/>
        <Setter Property="LoadedBehavior" Value="Manual"/>
        <Setter Property="Stretch" Value="UniformToFill"/>
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Source" Value="{Binding FileLocation}"/>
        <Setter Property="wpfFramework:MediaElementBehavior.IsPlaying" Value="{ Binding CurrentPageState.IsPlayingAnimation}"/>
        <Setter Property="wpfFramework:MediaElementBehavior.IsStopPlaying" Value="{Binding  CurrentPageState.IsStopPlayingAnimation}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding CurrentPageState.IsPlayingAnimation}" Value="True">
                <Setter Property="ToolTip" Value="Click on video to pause" />
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentPageState.IsPlayingAnimation}" Value="False">
                <Setter Property="ToolTip" Value="" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key='PageMediaPlayer' TargetType='ContentControl'>
        <Setter Property='Template'>
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Grid>

                        <MediaElement  Grid.Row="0" Style="{StaticResource AnimationMediaStyle}" 
                                 SpeedRatio="2" >
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseDown">
                                    <i:InvokeCommandAction Command="{Binding StopPalyCommand}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </MediaElement>
                        <Button Style="{StaticResource MediaPlayButtonStyle}" Command="{Binding StartPalyCommand}" Opacity="0.8">
                            <Image Source="pack://application:,,,/Resources/Images/play.png" OpacityMask="White" 
                                   ToolTip="Click on button to play"/>
                        </Button>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  TargetType="{x:Type TabControl}" x:Key="tabcontrolStyle">
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="BorderBrush" Value="Red"/>
        <Setter Property="Background" Value="WhiteSmoke"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border BorderThickness="0,0,1,1" BorderBrush="#D0CEBF" Grid.Row="1">
                            <Border BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{TemplateBinding BorderBrush}">
                                <Border Background="{TemplateBinding Background}">
                                    <ContentPresenter ContentSource="SelectedContent"/>
                                </Border>
                            </Border>
                        </Border>
                        <TabPanel Grid.Row="0" IsItemsHost="true"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TabItem" x:Key="hiddenTabItemStyle">
        <Setter Property="Visibility" Value="Collapsed"/>
    </Style>
    
    <Style TargetType="TabItem" x:Key="tabItemStyle">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border Name="Border" BorderThickness="1,1,1,0" BorderBrush="Gainsboro" CornerRadius="4,4,0,0" Margin="2,0">
                        <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="LightSkyBlue" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="GhostWhite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolTipWithErrorMessageOnErrorStyle" TargetType="TextBox" BasedOn="{StaticResource basePageControlStyle}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RedBackgroundOnErrorStyle" TargetType="TextBox" BasedOn="{StaticResource ToolTipWithErrorMessageOnErrorStyle}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CustomErrorControlOnErrorStyle" TargetType="Control" BasedOn="{StaticResource basePageControlStyle}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel>
                        <AdornedElementPlaceholder x:Name="placeholder" />
                        <TextBlock FontSize="11" FontStyle="Italic" Foreground="Red"
                                       Text="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors)/ErrorContent}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PageBorderStyle" TargetType="Border">
        <Setter Property="Control.BorderBrush" Value="LightGray" />
        <Setter Property="Control.BorderThickness" Value="0.5" />

    </Style>
    
    <Style x:Key='UserLoginUI' TargetType='ContentControl'>
        <Setter Property='Template'>
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="50"/>
                            <RowDefinition Height="15"/>
                            <RowDefinition Height="50"/>
                            <RowDefinition Height="15"/>
                            <RowDefinition Height="60"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition MinWidth="260"/>

                        </Grid.ColumnDefinitions>
                        <Label Grid.Row="0" Grid.Column="0" Content="User Name:" HorizontalContentAlignment="Left"  Margin="5" Foreground="White" 
                           FontSize="18" FontWeight="Bold"/>
                        <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding UserModel.UserName,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             HorizontalContentAlignment="Left" Padding="5" VerticalContentAlignment="Center"  Margin="5" 
                             BorderBrush="WhiteSmoke" Foreground="DarkOliveGreen"/>

                        <Label Grid.Row="2" Grid.Column="0" Content="Password:" HorizontalContentAlignment="Left"  Margin="5" Foreground="White"
                            FontSize="18" FontWeight="Bold" />
                        <wpfFramework:ShowCapLock Grid.Row="2" Grid.Column="1" IsTabStop="False" >
                            <PasswordBox    wpfFramework:PasswordBoxAssistant.BindPassword="true"   BorderBrush="WhiteSmoke" 
                       wpfFramework:PasswordBoxAssistant.BoundPassword="{Binding Path=UserModel.Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                       VerticalContentAlignment="Center" Padding="5"  Margin="5" Foreground="DarkOliveGreen"/>
                        </wpfFramework:ShowCapLock>
                        <Border Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" BorderThickness="0" BorderBrush="WhiteSmoke" Margin="6,5,5,5">
                            <Grid  >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Button Grid.Column="0"  Width ="120" Content="Log in" HorizontalAlignment="Center" Foreground="DarkOliveGreen"
                               Command="{Binding LoginCmd}" Padding="5,0,5,0" Margin="8" Background="AliceBlue" BorderBrush="WhiteSmoke" BorderThickness="0.4">

                                </Button>
                                <!--<ContentControl Grid.Column="0" Style="{StaticResource busyIndicator}" Height="38" Width="38" Foreground="CornflowerBlue"
                                             Visibility="{Binding IsLogging, Converter={StaticResource boolToVisibilityVisibleConverter}}">
                                    
                                 </ContentControl>-->

                                <Button Grid.Column="1" Width ="120"  Content="Shutdown" HorizontalAlignment="Center" 
                                    BorderBrush="WhiteSmoke" BorderThickness="0.4" Foreground="DarkOliveGreen"
                               Command="{Binding ExitApp}" Padding="5,0,5,0" Margin="8" ToolTip="Exit Application" Background="AliceBlue" 
                                        Visibility="{Binding AllowCancel, Mode=OneWay, Converter={StaticResource boolToVisibilityVisibleConverter}}"/>
                            </Grid>
                        </Border>
                        <TextBlock Grid.Row="5" Grid.ColumnSpan="2" Text= "{Binding UserModel.LoginError}"
                               Foreground="Red" FontStyle="Italic" HorizontalAlignment="Center" Margin="5" FontSize="14">
                        </TextBlock>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type wpfFramework:TabControlEx}" x:Key="tabcontrolStyleEx">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid Background="{TemplateBinding Background}" ClipToBounds="True" KeyboardNavigation.TabNavigation="Local" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <DockPanel Margin="2,2,0,0" LastChildFill="False">
                            <TabPanel x:Name="HeaderPanel" Margin="0,0,0,-1" VerticalAlignment="Bottom" Panel.ZIndex="1" DockPanel.Dock="Left"
                                  IsItemsHost="True" KeyboardNavigation.TabIndex="1" />
                        </DockPanel>
                        <Border x:Name="ContentPanel" Grid.Row="1" Grid.Column="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <Grid x:Name="PART_ItemsHolder" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>