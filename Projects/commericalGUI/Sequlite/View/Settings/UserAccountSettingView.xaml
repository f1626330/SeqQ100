<UserControl x:Class="Sequlite.UI.View.UserAccountSettingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
              xmlns:view="clr-namespace:Sequlite.UI.View"
             xmlns:viewModel="clr-namespace:Sequlite.UI.ViewModel"
             xmlns:wpfFramework="clr-namespace:Sequlite.WPF.Framework;assembly=Sequlite.WPF.Framework"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/PageViewDictionary.xaml"/>
            </ResourceDictionary.MergedDictionaries>
           
            <Style TargetType="TextBox" x:Key="basedTextBoxStyle" BasedOn="{StaticResource CustomErrorControlOnErrorStyle}">
                <Setter Property="Margin" Value="9" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="FontSize" Value="21" />
            </Style>

            <Style TargetType="PasswordBox" BasedOn="{StaticResource CustomErrorControlOnErrorStyle}">
                <Setter Property="Margin" Value="9" />
                <Setter Property="Padding" Value="3" />
                <Setter Property="FontSize" Value="21" />
            </Style>

            <!-- for creating -->
            <Style TargetType="TextBox" x:Key="ReadOnlyStyle" BasedOn="{StaticResource basedTextBoxStyle}">
                <Setter Property="IsReadOnly" Value="{Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToBooleanReverseMultiConverter}, ConverterParameter='CreatingAccount'}" />
            </Style>

            <!-- for creating or editing-->
            <Style TargetType="TextBox" x:Key="ReadOnlyStyle2" BasedOn="{StaticResource basedTextBoxStyle}">
                <Setter Property="IsReadOnly" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToBooleanReverseMultiConverter}, ConverterParameter='CreatingAccount, EditingAccount'}" >
                </Setter>
               
                <Setter Property="TextWrapping" Value="Wrap" />
            </Style>

            <!-- for image button -->
            <Style x:Key="ImageBtnAction" TargetType="{x:Type wpfFramework:ImageButton}" BasedOn="{StaticResource btnAction}">
                <Setter Property="Margin" Value="10,0,10,40" />
                <Setter Property="Width" Value="246" />
                <Setter Property="Command" Value="{Binding ContinueCommand}" />
                <Setter Property="Content" Value="{Binding Path=CommandParameter, RelativeSource={RelativeSource Self}, Converter={StaticResource enumToDisplayNameConverter} }" />
                <Setter Property="ToolTip" Value="{Binding Path=CommandParameter, RelativeSource={RelativeSource Self}, Converter={StaticResource enumToDisplayDescriptionConverter} }" />
            </Style>

            <Style x:Key="BackBtnAction" TargetType="{x:Type wpfFramework:ImageButton}" BasedOn="{StaticResource ImageBtnAction}">
                <Setter Property="ImageContent" Value="pack://application:,,,/Resources/Images/BackToHome.png" />
                <Style.Triggers>
                    <!--<DataTrigger Binding="{Binding IsAccountActionDone}" Value="True">
                        <Setter Property="ImageContent" Value="pack://application:,,,/Resources/Images/BackToHome.png" />
                    </DataTrigger>-->
                    
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsAccountActionDone}"  Value="False" />
                            <Condition Binding="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToBooleanReverseMultiConverter}, ConverterParameter='ViewingAccount'}"  Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Content" Value="Cancel" />
                        <Setter Property="ToolTip" Value="Cancel" />
                        <Setter Property="ImageContent" Value="pack://application:,,,/Resources/Images/Cancel.png" />
                    </MultiDataTrigger>
                    <!--<DataTrigger Binding="{Binding IsAccountActionDone}" Value="False">
                        <Setter Property="Content" Value="Cancel" />
                        <Setter Property="ToolTip" Value="Cancel" />
                    </DataTrigger>-->
                </Style.Triggers>
            </Style>

            <!-- for  button -->
            <Style x:Key="subBtnAction" TargetType="{x:Type Button}" >
                <Setter Property="Margin" Value="5" />
                <Setter Property="MinWidth" Value="76" />
                <Setter Property="Padding" Value="5" />
                <Setter Property="FontSize" Value="20" />
                <Setter Property="Command" Value="{Binding ContinueCommand}" />
                <Setter Property="Content" Value="{Binding Path=CommandParameter, RelativeSource={RelativeSource Self}, Converter={StaticResource enumToDisplayNameConverter} }" />
                <Setter Property="ToolTip" Value="{Binding Path=CommandParameter, RelativeSource={RelativeSource Self}, Converter={StaticResource enumToDisplayDescriptionConverter} }" />
                <Setter Property="Visibility" Value="{Binding IsAccountActionDone, Converter={StaticResource boolToVisibilityCollapsedConverter}}" />
            </Style>

            <Style TargetType="{x:Type wpfFramework:ImageButton}" BasedOn="{StaticResource ImageBtnAction}" x:Key="SerachBtnStyle">
                <Setter Property="Visibility"  Value="Collapsed" />
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsAccountActionDone}"  Value="False" />
                            <Condition Binding="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToBooleanMultiConverter}, ConverterParameter='ViewingAccount,DeletingAccount'}"  Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility"  Value="Visible" />
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <!-- for creating btn-->
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource subBtnAction}" x:Key="CreatingBtnStyle">
               
                <Setter Property="IsEnabled" >
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource isFalseMutipleConverter}">
                            <Binding Path="UserLoginInfo.HasError" />
                            <Binding Path="UserLoginInfo.UserInfo.HasError" />
                        </MultiBinding>
                        
                    </Setter.Value>
                </Setter>
                <!--<Setter Property="IsEnabled" Value="False" />
                <Style.Triggers>
                    <DataTrigger  Binding="{Binding   UserLoginInfo.HasError}"  Value="True" >
                        <Setter Property="IsEnabled" Value="False" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding   UserLoginInfo.UserInfo.HasError}"  Value="True" >
                        <Setter Property="IsEnabled" Value="False" />
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding   UserLoginInfo.HasError}"  Value="False" />
                            <Condition Binding="{Binding   UserLoginInfo.UserInfo.HasError}"  Value="False" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="IsEnabled" Value="True" />
                    </MultiDataTrigger>
                </Style.Triggers>-->
            </Style>
            
            <!-- for update profile-->
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource subBtnAction}" x:Key="EditingOrViewingBtnStyle">
                <Setter Property="Visibility" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter}, ConverterParameter='EditingAccount,ViewingAccount'}" >
                </Setter>
                <Setter Property="IsEnabled" Value="True"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsAccountActionDone}"  Value="True">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    
                    <MultiDataTrigger >
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding   UserLoginInfo.UserInfo.HasError}"  Value="True" />
                            <Condition Binding="{Binding AcoountSettingState,  Mode=OneWay,Converter={StaticResource enumToBooleanMultiConverter},ConverterParameter='EditingAccount'}"  Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="IsEnabled" Value="False" />
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <wpfFramework:ValueConverterGroup  x:Key="ChangePasswordOrViewingVisibilityConverter">
                <wpfFramework:EnumToBooleanMultiConverter />
                <wpfFramework:BooleanToHiddenNegateConverter />
            </wpfFramework:ValueConverterGroup>
            
            <!-- for change password btn-->
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource subBtnAction}" x:Key="ChangePasswordOrViewingBtnStyle">
                <Setter Property="Visibility" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter}, ConverterParameter='ViewingAccount,ChangingPassoword'}" >
                </Setter>
                <Setter Property="IsEnabled" Value="True"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsAccountActionDone}"  Value="True">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    
                    <MultiDataTrigger >
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding AcoountSettingState, Mode=OneWay,Converter={StaticResource enumToBooleanMultiConverter},ConverterParameter='ChangingPassoword'}"  Value="True" />
                            <Condition Binding="{Binding  UserLoginInfo.HasError}"  Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="IsEnabled" Value="False" />
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type FrameworkElement}" x:Key="VisibilityStyleForViewing" >
                <Setter Property="Visibility" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter}, ConverterParameter='ViewingAccount,ChangingPassoword,EditingAccount'}" >
                </Setter>
            </Style>

            <Style TargetType="{x:Type FrameworkElement}" x:Key="VisibilityStyleForCreating" >
                <Setter Property="Visibility" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter}, ConverterParameter='CreatingAccount'}" >
                </Setter>
            </Style>

            <Style TargetType="{x:Type Control}" x:Key="VisibilityStyleForCreatingWithErrorVlidation" BasedOn="{StaticResource CustomErrorControlOnErrorStyle}">
                <Setter Property="Visibility" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter}, ConverterParameter='CreatingAccount'}" >
                </Setter>
            </Style>

            <Style TargetType="{x:Type FrameworkElement}" x:Key="VisibilityStyleForDeleting" >
                <Setter Property="Visibility" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter}, ConverterParameter='DeletingAccount'}" >
                </Setter>
            </Style>

            <Style TargetType="{x:Type FrameworkElement}" x:Key="VisibilityStyleForViewingingOrDeleting" >
                <Setter Property="Visibility" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter}, ConverterParameter='ViewingAccount,DeletingAccount'}" >
                </Setter>
            </Style>
            
            <Style TargetType="{x:Type FrameworkElement}" x:Key="VisibilityStyleForCreatingOrViewingingOrDeleting" >
                <Setter Property="Visibility" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter}, ConverterParameter='CreatingAccount, ViewingAccount,ChangingPassoword,EditingAccount,DeletingAccount'}" >
                </Setter>
            </Style>

            <Style TargetType="{x:Type FrameworkElement}" x:Key="VisibilityStyleForCreatingOrEditing" >
                <Setter Property="Visibility" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter}, ConverterParameter='CreatingAccount, EditingAccount'}" >
                </Setter>
            </Style>

            <Style TargetType="{x:Type FrameworkElement}" x:Key="EnableStyleForViewingOrDeleting" >
                <Setter Property="IsEnabled" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToBooleanMultiConverter}, ConverterParameter='ViewingAccount, DeletingAccount'}" >
                </Setter>
            </Style>

            <Style TargetType="{x:Type FrameworkElement}" x:Key="EnableStyleForCreating" >
                <Setter Property="IsEnabled" 
                    Value="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToBooleanMultiConverter}, ConverterParameter='CreatingAccount'}" >
                </Setter>
            </Style>
            <Style TargetType="{x:Type Image}" x:Key="RequiredFieldImageStyle">
                <Setter Property="Source" Value="pack://application:,,,/Resources/Images/asterisk.png" />
                <Setter Property="Margin" Value="3,10,0,0" />
                <Setter Property="Width" Value="10" />
                <Setter Property="Stretch" Value="Uniform" />
                <Setter Property="ToolTip" Value="Required Field" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Top" />
            </Style>
            
            <Style TargetType="{x:Type Label}" x:Key="RequiredFieldLabelStyle">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Label">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Image Grid.Column ="0" 
                                       Style="{StaticResource RequiredFieldImageStyle}"
                                  Visibility="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter}, ConverterParameter='CreatingAccount, EditingAccount,ChangingPassoword'}"
                                       />
                                <Label Grid.Column ="1" Content="{TemplateBinding Content}" 
                                       />
                            </Grid>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type Label}" x:Key="RequiredFieldLabelStyleForCreating">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Label">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Image Grid.Column ="0" 
                                       Style="{StaticResource RequiredFieldImageStyle}"
                                  Visibility="{ Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter}, ConverterParameter='CreatingAccount'}"
                                       />
                                <Label Grid.Column ="1" Content="{TemplateBinding Content}" 
                                       />
                            </Grid>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid >
        <Grid.RowDefinitions>
            
            <RowDefinition Height="*"/>
            
        </Grid.RowDefinitions>
        <Border Grid.Row="0" VerticalAlignment="Stretch" 
                Visibility="{Binding IsVisible, ElementName=pg, Converter={StaticResource booleanToHiddenNegateConverter}}">
            <Border.Background>
                <LinearGradientBrush EndPoint="0.504,1.5" StartPoint="0.504,0.03">
                    <GradientStop Color="#BDD8E6" Offset="0"/>
                    <GradientStop Color="#FFFFFFFF" Offset="0.567"/>
                </LinearGradientBrush>
            </Border.Background>
            <!-- top account setting buttons -->
            <Grid  Grid.Row="0" HorizontalAlignment="Center" Background="Transparent" VerticalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <!-- view/edit account button -->
                <wpfFramework:ImageButton Grid.Row="0"
                        Style="{StaticResource ImageBtnAction}"  
                        
                        ImageContent="pack://application:,,,/Resources/Images/view-edit-account.png" >
                    <Button.CommandParameter>
                        <viewModel:AccountSettingOptionTypeEnum>ViewEdit</viewModel:AccountSettingOptionTypeEnum>
                    </Button.CommandParameter>
                </wpfFramework:ImageButton>
                <!-- create account button -->
                <wpfFramework:ImageButton Grid.Row="1"
                        Style="{StaticResource ImageBtnAction}"  
                        ImageContent="pack://application:,,,/Resources/Images/create-new-account.png" >
                    <Button.CommandParameter>
                        <viewModel:AccountSettingOptionTypeEnum>Create</viewModel:AccountSettingOptionTypeEnum>
                    </Button.CommandParameter>
                </wpfFramework:ImageButton>
                <!-- Delete account button -->
                <wpfFramework:ImageButton Grid.Row="2"
                        Style="{StaticResource ImageBtnAction}"  
                        ImageContent="pack://application:,,,/Resources/Images/delete-account.png" >
                    <Button.CommandParameter>
                        <viewModel:AccountSettingOptionTypeEnum>Delete</viewModel:AccountSettingOptionTypeEnum>
                    </Button.CommandParameter>
                </wpfFramework:ImageButton>
            </Grid>
        </Border>
        <!-- whole account settings form & account setting sub-buttons -->
        <Grid IsSharedSizeScope="True" Grid.Row="0" x:Name="pg" 
              Style="{StaticResource VisibilityStyleForCreatingOrViewingingOrDeleting}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" SharedSizeGroup="FirstColumn"/>
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <!-- login name-->
            <Border Grid.Row="0" Grid.ColumnSpan="2" Margin="5" Background="WhiteSmoke" BorderThickness="1" >
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="FirstColumnB" />
                        <ColumnDefinition />
                        <ColumnDefinition MaxWidth="45" Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Label Grid.Row="0" Grid.Column="0" Content="Login Name: " Style="{StaticResource RequiredFieldLabelStyleForCreating}" />
                    <!-- new user name field for creation-->
                    <TextBox Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" x:Name="userNameTexbox" 
                             Text="{Binding UserLoginInfo.UserName,UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" 
                              Style="{StaticResource VisibilityStyleForCreatingWithErrorVlidation}" FontSize="21" Margin="5"
                             VerticalContentAlignment="Center"/>


                    <ComboBox Grid.Row="0" Grid.Column="1" x:Name="UserNameCombo" ItemsSource="{Binding UserAccounts}" 
                              SelectedValuePath="UserName"
                               DisplayMemberPath="UserName"
                              SelectedValue="{Binding UserAccount, Mode=TwoWay}" 
                              FontSize="21" Margin="2"
                              Visibility="{Binding IsVisible, ElementName=userNameTexbox, Converter={StaticResource booleanToHiddenNegateConverter}}"
                              Style="{StaticResource EnableStyleForViewingOrDeleting}" >
                    </ComboBox>



                    <wpfFramework:ImageButton  Width="32" Height="32" MinWidth="32" Grid.Row="0" Grid.Column="2"  Margin="4"
                            Style="{StaticResource SerachBtnStyle}"   
                                   ImageContent="pack://application:,,,/Resources/Images/search.png"             
                             HorizontalAlignment="Left" >

                      
                        <Button.CommandParameter>
                            <viewModel:AccountSettingOptionTypeEnum>Search</viewModel:AccountSettingOptionTypeEnum>
                        </Button.CommandParameter>
                       
                    </wpfFramework:ImageButton>
                </Grid>
            </Border>

            <!-- access level-->
            <Border Grid.Row="1" Grid.ColumnSpan="2" Style="{StaticResource PageBorderStyle}" Margin="5" 
                    >
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="FirstColumnB"/>
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Row="0" Grid.Column="0" Content="Access Level:" Style="{StaticResource RequiredFieldLabelStyleForCreating}"/>
                    <ComboBox Grid.Row="0" Grid.Column="1"  MinWidth="140" HorizontalAlignment="Left" FontSize="21" VerticalContentAlignment="Center"
                              ItemsSource="{Binding Path=AccessRights}" 
                                                SelectedValuePath="Value"
                                                DisplayMemberPath="Name"
                                                ToolTip="{Binding SelectedItem.Dscription, RelativeSource={RelativeSource Self}}"
                                                ToolTipService.ShowOnDisabled="true"
                                                SelectedValue="{Binding Path=UserLoginInfo.AccessRight}" Margin="5"
                              Style="{StaticResource EnableStyleForCreating}" />
                    
                </Grid>
            </Border>

            <!-- password -->
            <Border Grid.Row="2" Grid.ColumnSpan="2" BorderBrush="Goldenrod" BorderThickness="1" Background="AntiqueWhite" 
                    Style="{StaticResource PageBorderStyle}" Margin="5" 
                    Visibility="{Binding AcoountSettingState, Mode=OneWay, Converter={StaticResource enumToVisibilityMultiConverter},ConverterParameter='CreatingAccount,ChangingPassoword'}">
               
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="FirstColumn"/>
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Label Grid.Row="0" Grid.Column="0" Content="Password:" Style="{StaticResource RequiredFieldLabelStyle}"/>
                    <PasswordBox Grid.Row="0" Grid.Column="1" 
                     wpfFramework:PasswordBoxAssistant.BindPassword="true" Margin="5,5,5,15" 
                      wpfFramework:PasswordBoxAssistant.BoundPassword="{Binding Path=UserLoginInfo.Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
                    
                    <Label Grid.Row="1" Grid.Column="0" Content="Confirm Password:" Style="{StaticResource RequiredFieldLabelStyle}"/>
                    <PasswordBox Grid.Row="1" Grid.Column="1" Margin="5,5,5,15"   Style="{StaticResource CustomErrorControlOnErrorStyle}"  x:Name="newPasswaoeBox"
                        wpfFramework:PasswordBoxAssistant.BindPassword="true" 
                        wpfFramework:PasswordBoxAssistant.BoundPassword="{Binding Path=NewPassword2, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
                </Grid>

            </Border>

            <!-- profile -->
            <Border Grid.Row="3" Grid.ColumnSpan="2"  Background="AliceBlue" BorderThickness="1" BorderBrush="Aqua"
                     Margin="5" 
                    Style="{StaticResource VisibilityStyleForCreatingOrEditing}" >

                <Grid IsSharedSizeScope="True">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="FirstColumnB"/>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Label Grid.Row="0" Grid.Column="0" Content="First Name:" Style="{StaticResource RequiredFieldLabelStyle}"/>
                        <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding UserLoginInfo.UserInfo.FirstName,UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                             Style="{StaticResource ReadOnlyStyle2}"/>

                        <Label Grid.Row="0" Grid.Column="2" Content="Last Name:" Style="{StaticResource RequiredFieldLabelStyle}"/>
                        <TextBox Grid.Row="0" Grid.Column="3" Text="{Binding UserLoginInfo.UserInfo.LastName,UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                             Style="{StaticResource ReadOnlyStyle2}"/>

                    </Grid>
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="FirstColumnB"/>
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>

                        </Grid.RowDefinitions>
                        <Label Grid.Row="0" Grid.Column="0" Content="Company:" />
                        <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding UserLoginInfo.UserInfo.Company}"
                             Style="{StaticResource ReadOnlyStyle2}"/>

                        <Label Grid.Row="1" Grid.Column="0" Content="Email:" Style="{StaticResource RequiredFieldLabelStyle}"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding UserLoginInfo.UserInfo.Email,UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                             Style="{StaticResource ReadOnlyStyle2}"/>

                        <Label Grid.Row="2" Grid.Column="0" Content="Phone:" />
                        <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding UserLoginInfo.UserInfo.PhoneNumber}"
                             Style="{StaticResource ReadOnlyStyle2}"/>

                        <Label Grid.Row="3" Grid.Column="0" Content="Address:" />
                        <TextBox Grid.Row="3" Grid.Column="1" TextWrapping="Wrap" Text="{Binding UserLoginInfo.UserInfo.Address}" 
                             Style="{StaticResource ReadOnlyStyle2}"/>

                        <Label Grid.Row="4" Grid.Column="0" Content="WeiChat ID:" />
                        <TextBox Grid.Row="4" Grid.Column="1" Text="{Binding UserLoginInfo.UserInfo.WeChatID}" 
                             Style="{StaticResource ReadOnlyStyle2}"/>
                    </Grid>
                </Grid>
            </Border>
            <!-- account setting sub -buttons -->
            <Border Grid.Row="4" Style="{StaticResource PageBorderStyle}"  Grid.ColumnSpan="2">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <!--<RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>-->
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <!-- change password and update profile-->
                    <WrapPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center" Margin="5,10,5,10" VerticalAlignment="Top"
                               Style="{StaticResource VisibilityStyleForViewing}" >

                        
                        <Button Style="{StaticResource ChangePasswordOrViewingBtnStyle}"  x:Name="changePasswordBtn" >
                            <Button.CommandParameter>
                                <viewModel:AccountSettingOptionTypeEnum>ChangePassword</viewModel:AccountSettingOptionTypeEnum>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{StaticResource EditingOrViewingBtnStyle}" Width="{Binding ActualWidth, ElementName=changePasswordBtn}">

                            <Button.CommandParameter>
                                <viewModel:AccountSettingOptionTypeEnum>UpdateProfile</viewModel:AccountSettingOptionTypeEnum>
                            </Button.CommandParameter>
                        </Button>
                    </WrapPanel>
                     <!-- create new account-->
                    <WrapPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center" Margin="5,10,5,10" VerticalAlignment="Top"
                               Style="{StaticResource VisibilityStyleForCreating}">
                        <Button Style="{StaticResource CreatingBtnStyle}">
                            <Button.CommandParameter>
                                <viewModel:AccountSettingOptionTypeEnum>Create</viewModel:AccountSettingOptionTypeEnum>
                            </Button.CommandParameter>
                        </Button>
                     </WrapPanel>
                    <!-- delete new account-->
                    <WrapPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center" Margin="5,10,5,10" VerticalAlignment="Top"
                               Style="{StaticResource VisibilityStyleForDeleting}">
                        <Button Style="{StaticResource subBtnAction}"  
                                Visibility="{Binding IsAccountActionDone, Converter={StaticResource boolToVisibilityCollapsedConverter}}">
                            <Button.CommandParameter>
                                <viewModel:AccountSettingOptionTypeEnum>Delete</viewModel:AccountSettingOptionTypeEnum>
                            </Button.CommandParameter>
                        </Button>
                    </WrapPanel>

                    <ContentControl Grid.Row="1" Style="{StaticResource busyIndicator}" Height="38" Width="38" Foreground="CornflowerBlue" 
                                             Visibility="{Binding IsRunningAccountAction, Converter={StaticResource boolToVisibilityVisibleConverter}}"/>

                    <!-- message -->
                    <TextBlock Grid.Row="0" Text="{Binding AccountSettingUpdateMessage.Message}" FontSize="21" VerticalAlignment="Top" HorizontalAlignment="Center"
                               Margin="5" Background="Transparent" TextWrapping="Wrap" 
                               Visibility="{Binding AccountSettingUpdateMessage, Converter={StaticResource nullVisibilityConverter}}"
                               >
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource bigTextBlockStyle}">
                                <Setter Property="Foreground" Value="Green"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding AccountSettingUpdateMessage.IsError}" Value="True">
                                        <Setter Property="Foreground" Value="Red"/>
                                    </DataTrigger>
                                </Style.Triggers>
                                </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    
                    <!-- back button -->
                    <wpfFramework:ImageButton Grid.Row="2" Width="140" Margin="2" VerticalAlignment="Top" Height="42" 
                            Style="{StaticResource BackBtnAction}"  >
                        <!--ImageContent="pack://application:,,,/Resources/Images/BackToHome.png" >-->
                            <Button.CommandParameter>
                                <viewModel:AccountSettingOptionTypeEnum>Back</viewModel:AccountSettingOptionTypeEnum>
                            </Button.CommandParameter>
                           
                    </wpfFramework:ImageButton>
                </Grid>
            </Border>
        </Grid>
    </Grid>
</UserControl>
